package org.example;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import javax.validation.constraints.NotNull;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

@SuppressWarnings("ALL")
public class MyTelegramBot extends TelegramLongPollingBot {
private final Map<Long, ScheduledFuture<?>> reminders = new HashMap<>();
private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public enum UserState {
        AWAITING_GENDER,
        AWAITING_HEIGHT,
        AWAITING_WEIGHT
    }

    // –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    private final Map<Long, UserState> userStates = new HashMap<>();
    private final Map<Long, String> userGenders = new HashMap<>();
    private final Map<Long, Double> userHeights = new HashMap<>();
    private final Database dbHandler = new Database();

    @Override
    public void onUpdateReceived(@NotNull Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();
            //    String memberName = update.getMessage().getFrom().getFirstName();
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            switch (messageText) {
                case "/start":
                    sendStartMessage(chatId);
                    break;
                case "/imt":
                    requestGender(chatId);
                    break;
                case "/history":
                    sendUserHistory(chatId);
                    break;
                case "/reminder_on":
                    enableReminder(chatId);
                    break;
                case "/reminder_off":
                    disableReminder(chatId);
                    break;
                default:
                    handleUserInput(chatId, messageText);
            }
        }else if (update.hasCallbackQuery()) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
            String callbackData = update.getCallbackQuery().getData();
            long chatId = update.getCallbackQuery().getMessage().getChatId();
            switch (callbackData) {
                case "gender_male":
                    userGenders.put(chatId, "–º—É–∂—Å–∫–æ–π");
                    userStates.put(chatId, UserState.AWAITING_HEIGHT);
                    requestHeight(chatId);
                    break;
                    case "gender_female":
                        userGenders.put(chatId, "–∂–µ–Ω—Å–∫–∏–π");
                        userStates.put(chatId, UserState.AWAITING_HEIGHT);
                        requestHeight(chatId);
                        break;
                        default:
                            sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }
        }
    }


    private void sendStartMessage(long chatId) {
        sendMessage(chatId, """
                –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–µ–∫—Å–∞ –º–∞—Å—Å—ã —Ç–µ–ª–∞ (–ò–ú–¢).
                –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:
                /imt - –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ò–ú–¢
                /history - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—á–µ—Ç–æ–≤
                /reminder_on - –í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –æ –∏–∑–º–µ—Ä–µ–Ω–∏–∏ –ò–ú–¢
                /reminder_off - –í—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –æ –∏–∑–º–µ—Ä–µ–Ω–∏–∏ –ò–ú–¢
                """);
    }

    private void sendGenderSelection(long chatId) {
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        // –ö–Ω–æ–ø–∫–∞ "–ú—É–∂—Å–∫–æ–π"
        InlineKeyboardButton maleButton = new InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π");
        maleButton.setCallbackData("gender_male");

        // –ö–Ω–æ–ø–∫–∞ "–ñ–µ–Ω—Å–∫–∏–π"
        InlineKeyboardButton femaleButton = new InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π");
        femaleButton.setCallbackData("gender_female");

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        rows.add(Arrays.asList(maleButton, femaleButton));
        keyboard.setKeyboard(rows);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:");
        message.setReplyMarkup(keyboard);

        try {
            execute(message);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void requestGender(long chatId) {
        sendGenderSelection(chatId);
        userStates.put(chatId, UserState.AWAITING_GENDER);
    }

    private void sendUserHistory(long chatId) {
        String history = dbHandler.getUserHistory(String.valueOf(chatId));
        if (history == null || history.isEmpty()){
            sendMessage(chatId, "–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—á–µ—Ç–æ–≤((.");
        } else {
        sendMessage(chatId, history);
    }
    }

    private void handleUserInput(long chatId, String messageText) {
        UserState currentState = userStates.get(chatId);

        if (currentState == null) {
            sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.");
            return;
        }

        switch (currentState) {
            case AWAITING_HEIGHT:
                try {
                    double height = Double.parseDouble(messageText);
                    if (height > 62 && height < 273) {
                        userHeights.put(chatId, height);
                        userStates.put(chatId, UserState.AWAITING_WEIGHT);
                        requestWeight(chatId);
                    } else {
                        sendMessage(chatId, "–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 62—Å–º –∏ –º–µ–Ω—å—à–µ 273—Å–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:");
                    }
                } catch (NumberFormatException e) {
                    sendMessage(chatId, "–û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ä–æ—Å—Ç–∞:");
                }
                break;
            case AWAITING_WEIGHT:
                try {
                    double weight = Double.parseDouble(messageText);
                    if (weight > 27 && weight < 611) {
                        double height = userHeights.get(chatId);
                        String gender = userGenders.get(chatId);
                        double bmi = calculateBMI(weight, height);
                        String interpretation = interpretBMI(bmi, gender);
                        String recommendations = getRecommendations(bmi, gender);

                        sendMessage(chatId, String.format("""
                                –í–∞—à –ò–ú–¢: %.2f
                                –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s
                                –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: %s
                                /history - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—á–µ—Ç–æ–≤
                                """, bmi, interpretation, recommendations));

                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                        saveBMIResult(chatId, gender, height, weight, bmi);

                        // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                        userStates.remove(chatId);
                        userGenders.remove(chatId);
                        userHeights.remove(chatId);
                    } else {
                        sendMessage(chatId, "–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 27–∫–≥ –∏ –º–µ–Ω—å—à–µ 611–∫–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:");
                    }
                } catch (NumberFormatException e) {
                    sendMessage(chatId, "–û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–µ—Å–∞:");
                }
                break;
        }
    }

    private void saveBMIResult(long chatId, String gender, double height, double weight, double bmi) {
        dbHandler.saveUserHistory(String.valueOf(chatId), gender, height, weight, bmi);
    }

    private boolean isValidGender(String gender) {
        return gender.equalsIgnoreCase("–º—É–∂—Å–∫–æ–π") || gender.equalsIgnoreCase("–∂–µ–Ω—Å–∫–∏–π");
    }

    private void requestHeight(long chatId) {
        sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175.5):");
    }

    private void requestWeight(long chatId) {

        sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70.5):");
    }


    private double calculateBMI(double weight, double height) {
        double heightInMeters = height / 100;
        return weight / (heightInMeters * heightInMeters);
    }

    private String interpretBMI(double bmi, String gender) {
        if (gender.equalsIgnoreCase("–º—É–∂—Å–∫–æ–π")) {
            if (bmi < 16) return "üü™ –≥–∏–ø–æ—Ç—Ä–æ—Ñ–∏—è 3-–π —Å—Ç–µ–ø–µ–Ω–∏";
            else if (bmi < 17) return "üü¶ –≥–∏–ø–æ—Ç—Ä–æ—Ñ–∏—è 2-–π —Å—Ç–µ–ø–µ–Ω–∏";
            else if (bmi < 18.5) return "üüß –≥–∏–ø–æ—Ç—Ä–æ—Ñ–∏—è 1-–π —Å—Ç–µ–ø–µ–Ω–∏";
            else if (bmi < 24.9) return "üü© –Ω–æ—Ä–º–∞";
            else if (bmi == 20.8) return "‚≠êÔ∏è –∏–¥–µ–∞–ª—å–Ω–æ";
            else if (bmi < 28.5) return "üü® –æ–∂–∏—Ä–µ–Ω–∏–µ 1-–π —Å—Ç–µ–ø–µ–Ω–∏";
            else if (bmi < 39) return "üüß –æ–∂–∏—Ä–µ–Ω–∏–µ 2-–π —Å—Ç–µ–ø–µ–Ω–∏";
            else return "üü• –æ–∂–∏—Ä–µ–Ω–∏–µ 3-–π —Å—Ç–µ–ø–µ–Ω–∏";
        } else { // –∂–µ–Ω—Å–∫–∏–π
            if (bmi < 16) return "üü™ –≥–∏–ø–æ—Ç—Ä–æ—Ñ–∏—è 3-–π —Å—Ç–µ–ø–µ–Ω–∏";
            else if (bmi < 18) return "üü¶ –≥–∏–ø–æ—Ç—Ä–æ—Ñ–∏—è 2-–π —Å—Ç–µ–ø–µ–Ω–∏";
            else if (bmi < 20) return "üüß –≥–∏–ø–æ—Ç—Ä–æ—Ñ–∏—è 1-–π —Å—Ç–µ–ø–µ–Ω–∏";
            else if (bmi < 24.99) return "üü© –Ω–æ—Ä–º–∞";
            else if (bmi == 22) return "‚≠êÔ∏è –∏–¥–µ–∞–ª—å–Ω–æ";
            else if (bmi < 29.99) return "üü® –æ–∂–∏—Ä–µ–Ω–∏–µ 1-–π —Å—Ç–µ–ø–µ–Ω–∏";
            else if (bmi < 39.99) return "üüß –æ–∂–∏—Ä–µ–Ω–∏–µ 2-–π —Å—Ç–µ–ø–µ–Ω–∏";
            else return "üü• –æ–∂–∏—Ä–µ–Ω–∏–µ 3-–π —Å—Ç–µ–ø–µ–Ω–∏";
        }
    }

    private String getRecommendations(double bmi, String gender) {
        if (gender.equalsIgnoreCase("–º—É–∂—Å–∫–æ–π")) {
            if (bmi < 16) return "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º.";
            else if (bmi < 17) return "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º.";
            else if (bmi < 18.5) return "–ü—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º.";
            else if (bmi < 24.9) return "–û—Ç–ª–∏—á–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å! –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏.";
            else if (bmi == 20.8) return "–ò–¥–µ–∞–ª—å–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏.";
            else if (bmi < 28.5) return "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–∏—Ç–∞–Ω–∏–µ –∏ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.";
            else if (bmi < 39)
                return "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–∏—Ç–∞–Ω–∏–µ –∏ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –ü—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º.";
            else return "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º.";
        } else { // –∂–µ–Ω—Å–∫–∏–π
            if (bmi < 16) return "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º.";
            else if (bmi < 18) return "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º.";
            else if (bmi < 20) return "–ü—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º.";
            else if (bmi < 24.99) return "–û—Ç–ª–∏—á–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å! –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏.";
            else if (bmi == 22) return "–ò–¥–µ–∞–ª—å–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏.";
            else if (bmi < 29.99) return "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–∏—Ç–∞–Ω–∏–µ –∏ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.";
            else if (bmi < 39.99)
                return "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–∏—Ç–∞–Ω–∏–µ –∏ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –ü—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º.";
            else return "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º.";
        }
    }

    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        try {
            execute(message);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @SuppressWarnings("CallToPrintStackTrace")
    private void enableReminder(long chatId) {
        if (reminders.containsKey(chatId)) {
            sendMessage(chatId, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ –≤–∫–ª—é—á—á–µ–Ω–æ.");
            return;
        }
        Runnable reminderTask = () -> sendMessage(chatId, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –ò–ú–¢ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /imt");

        try{
            ScheduledFuture<?> future = scheduler.scheduleAtFixedRate(reminderTask, 30, 30, TimeUnit.DAYS);
            reminders.put(chatId,future);
            sendMessage(chatId, "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–∑ –≤ –º–µ—Å—è—Ü.");
            } catch (Exception e){
                 sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.");
                 e.printStackTrace();
            }
    }

    private void disableReminder(long chatId) {
        ScheduledFuture<?> future = reminders.remove(chatId);
        if (future != null) {
            future.cancel(false);
            sendMessage(chatId, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.");
        } else {
            sendMessage(chatId, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –±—ã–ª–æ –≤–∫–ª—é—á–µ–Ω–æ.");
        }
    }


    @Override
    public String getBotUsername() {
        return "IMT_BroadBone_bot"; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à username
    }

    @Override
    public String getBotToken() {
        return "7257019584:AAFxkPppXtime1uoOv3gn-HOcOrpfYBK3SU"; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
    }
}
