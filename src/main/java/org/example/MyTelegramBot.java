package org.example;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;

import javax.validation.constraints.NotNull;
import java.util.HashMap;
import java.util.Map;

public class MyTelegramBot extends TelegramLongPollingBot {

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public enum UserState {
        AWAITING_GENDER,
        AWAITING_HEIGHT,
        AWAITING_WEIGHT
    }

    // –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    private final Map<Long, UserState> userStates = new HashMap<>();
    private final Map<Long, String> userGenders = new HashMap<>();
    private final Map<Long, Double> userHeights = new HashMap<>();
    private final Database dbHandler = new Database();

    @Override
    public void onUpdateReceived(@NotNull Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();
        //    String memberName = update.getMessage().getFrom().getFirstName();
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            switch (messageText) {
                case "/start":
                    sendStartMessage(chatId);
                    break;
                case "/imt":
                    requestGender(chatId);
                    break;
                case "/history":
                    sendUserHistory(chatId);
                    break;
                case "/help":
                    sendHelpMessage(chatId);
                    break;
                default:
                    handleUserInput(chatId, messageText);
            }
        }
    }
    private void sendStartMessage(long chatId) {
        sendMessage(chatId, """
                –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–µ–∫—Å–∞ –º–∞—Å—Å—ã —Ç–µ–ª–∞ (–ò–ú–¢).
                –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:
                /imt - –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ò–ú–¢
                /history - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—á–µ—Ç–æ–≤
                /help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å
                """);
    }

    private void requestGender(long chatId) {
        sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª (–º—É–∂—Å–∫–æ–π/–∂–µ–Ω—Å–∫–∏–π):");
        userStates.put(chatId, UserState.AWAITING_GENDER);
    }

    private void sendUserHistory(long chatId) {
        String history = dbHandler.getUserHistory(String.valueOf(chatId));
        sendMessage(chatId, history);
    }

    private void sendHelpMessage(long chatId) {
        sendMessage(chatId, """
            –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–∞—à –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞ (–ò–ú–¢) –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
            –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
            /imt - –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ò–ú–¢
            /history - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—á–µ—Ç–æ–≤  
            """);
    }

    private void handleUserInput(long chatId, String messageText) {
        UserState currentState = userStates.getOrDefault(chatId, null);

        if (currentState == null) {
            sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.");
            return;
        }

        switch (currentState) {
            case AWAITING_GENDER:
                if (isValidGender(messageText)) {
                    userGenders.put(chatId, messageText.toLowerCase());
                    userStates.put(chatId, UserState.AWAITING_HEIGHT);
                    requestHeight(chatId);
                } else {
                    sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª (–º—É–∂—Å–∫–æ–π/–∂–µ–Ω—Å–∫–∏–π):");
                }
                break;
            case AWAITING_HEIGHT:
                try {
                    double height = Double.parseDouble(messageText);
                    if (height > 0) {
                        userHeights.put(chatId, height);
                        userStates.put(chatId, UserState.AWAITING_WEIGHT);
                        requestWeight(chatId);
                    } else {
                        sendMessage(chatId, "–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:");
                    }
                } catch (NumberFormatException e) {
                    sendMessage(chatId, "–û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ä–æ—Å—Ç–∞:");
                }
                break;
            case AWAITING_WEIGHT:
                try {
                    double weight = Double.parseDouble(messageText);
                    if (weight > 0) {
                        double height = userHeights.get(chatId);
                        String gender = userGenders.get(chatId);
                        double bmi = calculateBMI(weight, height);
                        String interpretation = interpretBMI(bmi, gender);
                        String recommendations = getRecommendations(bmi, gender);

                        sendMessage(chatId, String.format("""
                                –í–∞—à –ò–ú–¢: %.2f
                                –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s
                                –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: %s
                                """, bmi, interpretation, recommendations));

                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                        saveBMIResult(chatId, gender, height, weight, bmi);

                        // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                        userStates.remove(chatId);
                        userGenders.remove(chatId);
                        userHeights.remove(chatId);
                    } else {
                        sendMessage(chatId, "–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:");
                    }
                } catch (NumberFormatException e) {
                    sendMessage(chatId, "–û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–µ—Å–∞:");
                }
                break;
        }
    }

    private void saveBMIResult(long chatId, String gender, double height, double weight, double bmi) {
        dbHandler.saveUserHistory(String.valueOf(chatId), gender, height, weight, bmi);
    }

    private boolean isValidGender(String gender) {
        return gender.equalsIgnoreCase("–º—É–∂—Å–∫–æ–π") || gender.equalsIgnoreCase("–∂–µ–Ω—Å–∫–∏–π");
    }

    private void requestHeight(long chatId) {
        sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175):");
    }

    private void requestWeight(long chatId) {
        sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70):");
    }


    private double calculateBMI(double weight, double height) {
        double heightInMeters = height / 100;
        return weight / (heightInMeters * heightInMeters);
    }

    private String interpretBMI(double bmi, String gender) {
        if (gender.equalsIgnoreCase("–º—É–∂—Å–∫–æ–π")) {
            if (bmi < 16) return "üü™ –≥–∏–ø–æ—Ç—Ä–æ—Ñ–∏—è 3-–π —Å—Ç–µ–ø–µ–Ω–∏";
            else if (bmi < 17) return "üü¶ –≥–∏–ø–æ—Ç—Ä–æ—Ñ–∏—è 2-–π —Å—Ç–µ–ø–µ–Ω–∏";
            else if (bmi < 18.5) return "üüß –≥–∏–ø–æ—Ç—Ä–æ—Ñ–∏—è 1-–π —Å—Ç–µ–ø–µ–Ω–∏";
            else if (bmi < 24.9) return "üü© –Ω–æ—Ä–º–∞";
            else if (bmi == 20.8) return "‚≠êÔ∏è –∏–¥–µ–∞–ª—å–Ω–æ";
            else if (bmi < 28.5) return "üü® –æ–∂–∏—Ä–µ–Ω–∏–µ 1-–π —Å—Ç–µ–ø–µ–Ω–∏";
            else if (bmi < 39) return "üüß –æ–∂–∏—Ä–µ–Ω–∏–µ 2-–π —Å—Ç–µ–ø–µ–Ω–∏";
            else return "üü• –æ–∂–∏—Ä–µ–Ω–∏–µ 3-–π —Å—Ç–µ–ø–µ–Ω–∏";
        } else { // –∂–µ–Ω—Å–∫–∏–π
            if (bmi < 16) return "üü™ –≥–∏–ø–æ—Ç—Ä–æ—Ñ–∏—è 3-–π —Å—Ç–µ–ø–µ–Ω–∏";
            else if (bmi < 18) return "üü¶ –≥–∏–ø–æ—Ç—Ä–æ—Ñ–∏—è 2-–π —Å—Ç–µ–ø–µ–Ω–∏";
            else if (bmi < 20) return "üüß –≥–∏–ø–æ—Ç—Ä–æ—Ñ–∏—è 1-–π —Å—Ç–µ–ø–µ–Ω–∏";
            else if (bmi < 24.99) return "üü© –Ω–æ—Ä–º–∞";
            else if (bmi == 22) return "‚≠êÔ∏è –∏–¥–µ–∞–ª—å–Ω–æ";
            else if (bmi < 29.99) return "üü® –æ–∂–∏—Ä–µ–Ω–∏–µ 1-–π —Å—Ç–µ–ø–µ–Ω–∏";
            else if (bmi < 39.99) return "üüß –æ–∂–∏—Ä–µ–Ω–∏–µ 2-–π —Å—Ç–µ–ø–µ–Ω–∏";
            else return "üü• –æ–∂–∏—Ä–µ–Ω–∏–µ 3-–π —Å—Ç–µ–ø–µ–Ω–∏";
        }
    }

    private String getRecommendations(double bmi, String gender) {
        if (gender.equalsIgnoreCase("–º—É–∂—Å–∫–æ–π")) {
            if (bmi < 16) return "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º.";
            else if (bmi < 17) return "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º.";
            else if (bmi < 18.5) return "–ü—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º.";
            else if (bmi < 24.9) return "–û—Ç–ª–∏—á–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å! –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏.";
            else if (bmi == 20.8) return "–ò–¥–µ–∞–ª—å–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏.";
            else if (bmi < 28.5) return "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–∏—Ç–∞–Ω–∏–µ –∏ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.";
            else if (bmi < 39) return "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–∏—Ç–∞–Ω–∏–µ –∏ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –ü—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º.";
            else return "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º.";
        } else { // –∂–µ–Ω—Å–∫–∏–π
            if (bmi < 16) return "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º.";
            else if (bmi < 18) return "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º.";
            else if (bmi < 20) return "–ü—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º.";
            else if (bmi < 24.99) return "–û—Ç–ª–∏—á–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å! –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏.";
            else if (bmi == 22) return "–ò–¥–µ–∞–ª—å–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏.";
            else if (bmi < 29.99) return "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–∏—Ç–∞–Ω–∏–µ –∏ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.";
            else if (bmi < 39.99) return "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–∏—Ç–∞–Ω–∏–µ –∏ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –ü—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º.";
            else return "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º.";
        }
    }

    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        try {
            execute(message);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    @Override
    public String getBotUsername() {
        return "IMT_BroadBone_bot"; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à username
    }

    @Override
    public String getBotToken() {
        return "7257019584:AAFxkPppXtime1uoOv3gn-HOcOrpfYBK3SU"; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
    }
}
